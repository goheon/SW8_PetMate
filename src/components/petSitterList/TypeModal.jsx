import { useState, useEffect } from 'react';
import Swal from 'sweetalert2';
import './TypeModal.scss';

function TypeModal(props) {
    const TYPE = ['Ï†ÑÏ≤¥ üê∂üê±', 'Í∞ïÏïÑÏßÄ', 'Í≥†ÏñëÏù¥'];
    const SIZE = ['ÏÜåÌòïÍ≤¨', 'Ï§ëÌòïÍ≤¨', 'ÎåÄÌòïÍ≤¨'];
    const [tempSelectedType, setTempSelectedType] = useState(props.selectedType);
    const [tempSelectedSizes, setTempSelectedSizes] = useState([]);

    const handleTypeChange = (type) => {
        setTempSelectedType(type);
        if (TYPE.indexOf(type) === 1) {
            setTempSelectedSizes(SIZE);
        } else {
            setTempSelectedSizes([]);
        }
    };

    const handleSizeChange = (size, isChecked) => {
        if (isChecked) { // Ï≤¥ÌÅ¨
            setTempSelectedSizes([...tempSelectedSizes, size]);
        } else { // Ï≤¥ÌÅ¨ Ìï¥Ï†ú
            // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÇ¨Ïù¥Ï¶àÍ∞Ä 1Í∞ú Ïù¥ÏÉÅÏùº Í≤ΩÏö∞ÏóêÎßå Ï≤¥ÌÅ¨ Ìï¥Ï†úÎ•º ÏàòÌñâ
            if (tempSelectedSizes.length > 1) {
                setTempSelectedSizes(tempSelectedSizes.filter(s => s !== size));
            } else {
                // ÏÑ†ÌÉùÎêú ÏÇ¨Ïù¥Ï¶àÍ∞Ä ÌïòÎÇòÎøêÏùº Í≤ΩÏö∞ Ï≤¥ÌÅ¨ Ìï¥Ï†úÎ•º ÏàòÌñâÌïòÏßÄ ÏïäÍ≥†,
                // ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏµúÏÜå ÌïòÎÇòÏùò ÏÇ¨Ïù¥Ï¶àÎ•º ÏÑ†ÌÉùÌï¥Ïïº ÌïúÎã§Îäî Í≤ÉÏùÑ ÏïåÎ¶ΩÎãàÎã§.
                Swal.fire({
                    title: 'ÏÑ†ÌÉù ÌôïÏù∏',
                    text: `Í∞ïÏïÑÏßÄ ÌÅ¨Í∏∞Îäî ÏµúÏÜå 1Í∞ú Ïù¥ÏÉÅ ÏÑ†ÌÉùÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.`,
                    icon: 'warning',
                    customClass: { container: 'custom-popup' },
                  });
            }
        };
    }

    const handleResetClick = () => {
        props.setSelectedType('Ï†ÑÏ≤¥ üê∂üê±');
        props.setActiveModal('');
    };

    const handleApplyClick = () => {
        props.setSelectedType(tempSelectedType);
        props.setSelectedSizes(tempSelectedSizes);
        props.setActiveModal('');

    };

    useEffect(() => {
        // Í∞ïÏïÑÏßÄÍ∞Ä ÏÑ†ÌÉùÏó¨Î∂Ä ÌôïÏù∏ ÌõÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (props.selectedType === 'Í∞ïÏïÑÏßÄ') {
            setTempSelectedSizes(props.selectedSizes.length > 0 ? props.selectedSizes : SIZE);
        } else {
            setTempSelectedSizes([]);
        }
    }, [props.selectedType, props.selectedSizes]);

    return (
        <div className='type-modal'>
            <div className='apply-box'>
                <p>Î∞òÎ†§ÎèôÎ¨º Ï¢ÖÎ•ò</p>
                <div className='apply-radio-box'>
                    {
                        TYPE.map((type) => {
                            return (
                                <div className='radio-box' key={type}>
                                    <label className='radio-label'>
                                        <input type="radio" name="radio" checked={tempSelectedType === type}
                                            onChange={() => handleTypeChange(type)} />
                                        <span>{type}</span>
                                    </label>
                                </div>
                            )
                        })
                    }
                </div>

                {tempSelectedType === 'Í∞ïÏïÑÏßÄ' ?
                    <div className='dog-checked'>
                        <p>Í∞ïÏïÑÏßÄ ÌÅ¨Í∏∞</p>
                        <div className='apply-check-box'>
                            {
                                SIZE.map((size) => {
                                    return (
                                        <div className='apply-check' key={size}>
                                            <label className='check-label'>
                                                <input type="checkbox" name="checkbox" checked={tempSelectedSizes.includes(size)}
                                                    onChange={(e) => handleSizeChange(size, e.target.checked)} />
                                                <span>{size}</span>
                                            </label>
                                        </div>
                                    )
                                })
                            }
                        </div>
                    </div> : null
                }

            </div>

            <button className='reset-button' onClick={handleResetClick}>Ï¥àÍ∏∞Ìôî</button>
            <button className='apply-button' onClick={handleApplyClick}>Ï†ÅÏö©ÌïòÍ∏∞</button>
        </div>
    )
}

export default TypeModal;